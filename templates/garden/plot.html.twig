{% block body %}
    <div class="container">
        <div class="card plotParamsCard cw-100">
            <button class="btn btn-warning w-100" type="button" data-toggle="collapse" data-target="#collapsePlotParams" aria-expanded="false" aria-controls="collapsePlotParams">
                Paramètres de la parcelle
            </button>
            <div class="collapse" id="collapsePlotParams">
                TODO plot params form
            </div>
        </div>
        <button class="btn btn-primary w-100" type="button" data-toggle="collapse" data-target="#collapseSpecimens" aria-expanded="false" aria-controls="collapseSpecimens">
            <div class="container">
                Vos spécimens plantés
            </div>
        </button>
        <div class="collapse" id="collapseSpecimens">
            {% for specimen in plot.specimens %}
                <div class="card specimenCard">
                    <div class="media">
                        <img src="{{ asset('assets/images/plants/' ~ specimen.plant.picturePath) }}" width="200" class="rounded align-self-center mr-3" alt="...">
                        <div class="media-body">
                            <h5 class="plantName">{{ specimen.plant.name }}</h5>
                            <em>Planté(e) le {{ specimen.plantationDate|date('d/m/Y à H:i') }}</em>
                            {% if specimen.lastWateredDate is not same as(null) %}
                                <small>Arrosé(e) le <i>{{ specimen.lastWateredDate|date('d/m/Y à H:i') }}</i></small>
                            {% endif %}
                            {% if specimen.lastFertilizedDate is not same as(null) %}
                                <small>Fertilisé(e) le <i>{{ specimen.lastFertilizedDate|date('d/m/Y à H:i') }}</i></small>
                            {% endif %}
                            <div class="container">
                                <button class="btn btn-primary btn-sm actionButton" data-href="{{ path('specimen_waterize', {'id': specimen.id}) }}">Arrosage</button>
                                <button class="btn btn-warning btn-sm actionButton" data-href="{{ path('specimen_fertilize', {'id': specimen.id}) }}">Mettre de l'engrais</button>
                                <button class="btn btn-danger btn-sm actionButton" data-href="{{ path('specimen_go_to_next_life_cycle_step', {'id': specimen.id}) }}">Etape de cycle de vie suivante</button>

                                <button class="btn btn-sm btn-secondary collapseSpecimenLogsBtn" type="button" data-toggle="collapse" data-target="#collapseSpecimenLogs-{{ specimen.id }}" aria-expanded="false" aria-controls="collapseSpecimenLogs-{{ specimen.id }}">
                                    Cycle de vie
                                </button>
                                <ul class="list-group">
                                    <div class="row">
                                        <canvas class="specimenLifeChart" id="specimenLifeChart-{{ specimen.id }}" data-specimen-id="{{ specimen.id }}" width="100%" height="40vh"></canvas>
                                        <br>
                                        <button class="btn btn-sm" id="randomizeData-{{ specimen.id }}">Randomize Data</button>
                                        <button class="btn btn-sm" id="addDataset-{{ specimen.id }}">Add Dataset</button>
                                        <button class="btn btn-sm" id="removeDataset-{{ specimen.id }}">Remove Dataset</button>
                                        <button class="btn btn-sm" id="addData-{{ specimen.id }}">Add Data</button>
                                        <button class="btn btn-sm" id="removeData-{{ specimen.id }}">Remove Data</button>
                                    </div>
                                    <div class="row">
                                        {% for result in specimen.specimenLifeResults %}
                                            {{ dump(result) }}
                                        {% endfor %}
                                    </div>
                                </ul>
                                <div class="collapse collapseSpecimenLogs" id="collapseSpecimenLogs-{{ specimen.id }}">
                                    <ul class="list-group">
                                        {% for log in specimen.logs %}
                                            {% if log.eventAction == "Next Life Cycle Step" or log.eventAction == "Set Specific Life Cycle Step" %}
                                                <li class="list-group-item" data-action="{{ log.eventAction }}"><small>{{ log.eventDate|date('d/m/Y à H:i') }} - {{ log.eventMessage }}</small></li>
                                            {% endif %}
                                            {% if log.eventAction == "Waterize" and log.eventDate == specimen.lastWateredDate %}
                                                <li class="list-group-item" data-action="{{ log.eventAction }}"><small>{{ log.eventDate|date('d/m/Y à H:i') }} - {{ log.eventMessage }}</small></li>
                                            {% endif %}
                                        {% endfor %}
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <style type="text/css" href="{{ asset('assets/css/chartUtil.css') }}"></style>
    <style>
        .specimenCard {
            margin-top:10px;
            margin-bottom: 5px;
        }

        .collapseSpecimenLogsBtn {
            margin-top:15px;
            margin-bottom:15px;
        }

        .collapseSpecimenLogs {
            margin-bottom:15px;
        }

        .plotParamsCard {
            margin-bottom: 15px;
        }

        .modal-body {
            background-image: url('{{ asset('assets/texture/soiltypes/' ~ plot.soiltype.code ~ '.png') }}');
        }

        .plantName {
            margin-top:2rem;
        }

    </style>

{% endblock %}

{% block javascripts %}
    <script>
        var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        var config = [];
        var ctx = [];
        var charts = [];

        $('.specimenLifeChart').each((i, el) => {
            var specimenId = el.getAttribute('data-specimen-id');
            config[specimenId] = {
                type: 'line',
                data: {
                    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                    datasets: [{
                        label: 'My First dataset',
                        backgroundColor: window.chartColors.red,
                        borderColor: window.chartColors.red,
                        data: [
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor()
                        ],
                        fill: false,
                    }, {
                        label: 'My Second dataset',
                        fill: false,
                        backgroundColor: window.chartColors.blue,
                        borderColor: window.chartColors.blue,
                        data: [
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor(),
                            randomScalingFactor()
                        ],
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Chart.js Line Chart'
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false,
                    },
                    hover: {
                        mode: 'nearest',
                        intersect: true
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Month'
                            }
                        }],
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Value'
                            }
                        }]
                    }
                }
            };
            ctx[specimenId] = document.getElementById('specimenLifeChart-' + specimenId).getContext('2d');
            charts[specimenId] = new Chart(ctx[specimenId], config[specimenId]);

            document.getElementById('randomizeData-' + specimenId).addEventListener('click', function() {
                config[specimenId].data.datasets.forEach(function(dataset) {
                    dataset.data = dataset.data.map(function() {
                        return randomScalingFactor();
                    });

                });

                charts[specimenId].update();
            });

            var colorNames = Object.keys(window.chartColors);
            document.getElementById('addDataset-' + specimenId).addEventListener('click', function() {
                var colorName = colorNames[config[specimenId].data.datasets.length % colorNames.length];
                var newColor = window.chartColors[colorName];
                var newDataset = {
                    label: 'Dataset ' + config[specimenId].data.datasets.length,
                    backgroundColor: newColor,
                    borderColor: newColor,
                    data: [],
                    fill: false
                };

                for (var index = 0; index < config[specimenId].data.labels.length; ++index) {
                    newDataset.data.push(randomScalingFactor());
                }

                config[specimenId].data.datasets.push(newDataset);
                charts[specimenId].update();
            });

            document.getElementById('addData-' + specimenId).addEventListener('click', function() {
                if (config[specimenId].data.datasets.length > 0) {
                    var month = MONTHS[config[specimenId].data.labels.length % MONTHS.length];
                    config[specimenId].data.labels.push(month);

                    config[specimenId].data.datasets.forEach(function(dataset) {
                        dataset.data.push(randomScalingFactor());
                    });

                    charts[specimenId].update();
                }
            });

            document.getElementById('removeDataset-' + specimenId).addEventListener('click', function() {
                config[specimenId].data.datasets.splice(0, 1);
                charts[specimenId].update();
            });

            document.getElementById('removeData-' + specimenId).addEventListener('click', function() {
                config[specimenId].data.labels.splice(-1, 1); // remove the label first

                config[specimenId].data.datasets.forEach(function(dataset) {
                    dataset.data.pop();
                });

                charts[specimenId].update();
            });
        });
    </script>
{% endblock %}